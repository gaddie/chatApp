{"ast":null,"code":"var _jsxFileName = \"/Users/gadson/Desktop/project/my-react-app/src/ChatApp.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatApp = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [senderId, setSenderId] = useState('');\n  const handleSenderIdChange = e => {\n    const inputValue = e.target.value;\n    // Allow only digits (0-9)\n    const sanitizedValue = inputValue.replace(/[^0-9]/g, '');\n    setSenderId(sanitizedValue);\n  };\n  const sendMessage = async () => {\n    // Check if required fields are filled\n    if (!senderId || !newMessage) {\n      alert('Sender ID and Message are required.');\n      return;\n    }\n\n    // Send message to the backend\n    const response = await fetch('/api/messages', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        senderId: senderId,\n        message: newMessage\n      })\n    });\n    const result = await response.json();\n    console.log(result);\n\n    // Clear the message input\n    setNewMessage('');\n  };\n  useEffect(() => {\n    // Fetch and display messages from the backend\n    const fetchMessages = async () => {\n      const response = await fetch('/api/messages');\n      const result = await response.json();\n      setMessages(result);\n    };\n    fetchMessages();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"senderId\",\n        className: \"required-label\",\n        children: \"ID*\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"senderId\",\n        value: senderId,\n        onChange: handleSenderIdChange,\n        className: \"sender-input\",\n        placeholder: \"Enter your ID\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"newMessage\",\n        className: \"required-label\",\n        children: \"Message*\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        id: \"newMessage\",\n        value: newMessage,\n        onChange: e => setNewMessage(e.target.value),\n        className: \"message-input\",\n        placeholder: \"Type your message...\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        className: \"send-button\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: messages.map(msg => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"sender-tag\",\n          children: [msg.sender, \": \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this), msg.text]\n      }, msg.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatApp, \"qqxTwYL69VWLvg5QpWC3MoWTMZI=\");\n_c = ChatApp;\nexport default ChatApp;\nvar _c;\n$RefreshReg$(_c, \"ChatApp\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ChatApp","_s","messages","setMessages","newMessage","setNewMessage","senderId","setSenderId","handleSenderIdChange","e","inputValue","target","value","sanitizedValue","replace","sendMessage","alert","response","fetch","method","headers","body","JSON","stringify","message","result","json","console","log","fetchMessages","className","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","id","onChange","placeholder","required","onClick","map","msg","sender","text","_c","$RefreshReg$"],"sources":["/Users/gadson/Desktop/project/my-react-app/src/ChatApp.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst ChatApp = () => {\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [senderId, setSenderId] = useState('');\n\n  const handleSenderIdChange = (e) => {\n    const inputValue = e.target.value;\n    // Allow only digits (0-9)\n    const sanitizedValue = inputValue.replace(/[^0-9]/g, '');\n    setSenderId(sanitizedValue);\n  };\n\n  const sendMessage = async () => {\n    // Check if required fields are filled\n    if (!senderId || !newMessage) {\n      alert('Sender ID and Message are required.');\n      return;\n    }\n\n    // Send message to the backend\n    const response = await fetch('/api/messages', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ senderId: senderId, message: newMessage }),\n    });\n\n    const result = await response.json();\n    console.log(result);\n\n    // Clear the message input\n    setNewMessage('');\n  };\n\n  useEffect(() => {\n    // Fetch and display messages from the backend\n    const fetchMessages = async () => {\n      const response = await fetch('/api/messages');\n      const result = await response.json();\n      setMessages(result);\n    };\n\n    fetchMessages();\n  }, []);\n\n  return (\n    <div className=\"chat-container\">\n      <div className=\"input-area\">\n        <label htmlFor=\"senderId\" className=\"required-label\">ID*</label>\n        <input\n          type=\"text\"\n          id=\"senderId\"\n          value={senderId}\n          onChange={handleSenderIdChange}\n          className=\"sender-input\"\n          placeholder=\"Enter your ID\"\n          required\n        />\n        <label htmlFor=\"newMessage\" className=\"required-label\">Message*</label>\n        <textarea\n          id=\"newMessage\"\n          value={newMessage}\n          onChange={(e) => setNewMessage(e.target.value)}\n          className=\"message-input\"\n          placeholder=\"Type your message...\"\n          required\n        />\n        <button onClick={sendMessage} className=\"send-button\">Send</button>\n      </div>\n      <div className=\"chat-messages\">\n        {messages.map((msg) => (\n          <div key={msg.id} className=\"message\">\n            <span className=\"sender-tag\">{msg.sender}: </span>\n            {msg.text}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ChatApp;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}