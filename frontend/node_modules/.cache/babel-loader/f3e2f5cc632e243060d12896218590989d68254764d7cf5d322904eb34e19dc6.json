{"ast":null,"code":"var _jsxFileName = \"/Users/gadson/Desktop/project/my-react-app/src/ChatApp.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatApp = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [senderId, setSenderName] = useState('');\n  const sendMessage = async () => {\n    // Send message to the backend\n    const response = await fetch('/api/messages', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        sender: senderName,\n        message: newMessage\n      })\n    });\n    const result = await response.json();\n    console.log(result);\n\n    // Clear the message input\n    setNewMessage('');\n  };\n  useEffect(() => {\n    // Fetch and display messages from the backend\n    const fetchMessages = async () => {\n      const response = await fetch('/api/messages');\n      const result = await response.json();\n      setMessages(result);\n    };\n    fetchMessages();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"value\",\n        value: senderId,\n        onChange: e => setSenderName(e.target.value),\n        className: \"sender-input\",\n        placeholder: \"ID\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: newMessage,\n        onChange: e => setNewMessage(e.target.value),\n        className: \"message-input\",\n        placeholder: \"Type your message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        className: \"send-button\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: messages.map(msg => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"sender-tag\",\n          children: [msg.sender, \": \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this), msg.text]\n      }, msg.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatApp, \"gsYppGwZbauIz2GwMF9h0/FuLEY=\");\n_c = ChatApp;\nexport default ChatApp;\nvar _c;\n$RefreshReg$(_c, \"ChatApp\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ChatApp","_s","messages","setMessages","newMessage","setNewMessage","senderId","setSenderName","sendMessage","response","fetch","method","headers","body","JSON","stringify","sender","senderName","message","result","json","console","log","fetchMessages","className","children","type","value","onChange","e","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","msg","text","id","_c","$RefreshReg$"],"sources":["/Users/gadson/Desktop/project/my-react-app/src/ChatApp.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst ChatApp = () => {\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [senderId, setSenderName] = useState('');\n\n  const sendMessage = async () => {\n    // Send message to the backend\n    const response = await fetch('/api/messages', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ sender: senderName, message: newMessage }),\n    });\n\n    const result = await response.json();\n    console.log(result);\n\n    // Clear the message input\n    setNewMessage('');\n  };\n\n  useEffect(() => {\n    // Fetch and display messages from the backend\n    const fetchMessages = async () => {\n      const response = await fetch('/api/messages');\n      const result = await response.json();\n      setMessages(result);\n    };\n\n    fetchMessages();\n  }, []);\n\n  return (\n    <div className=\"chat-container\">\n      <div className=\"input-area\">\n        <input\n          type=\"value\"\n          value={senderId}\n          onChange={(e) => setSenderName(e.target.value)}\n          className=\"sender-input\"\n          placeholder=\"ID\"\n        />\n        <textarea\n          value={newMessage}\n          onChange={(e) => setNewMessage(e.target.value)}\n          className=\"message-input\"\n          placeholder=\"Type your message...\"\n        />\n        <button onClick={sendMessage} className=\"send-button\">Send</button>\n      </div>\n      <div className=\"chat-messages\">\n        {messages.map((msg) => (\n          <div key={msg.id} className=\"message\">\n            <span className=\"sender-tag\">{msg.sender}: </span>\n            {msg.text}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ChatApp;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}